@page
@model CRM_Project.Pages.CRM.IndexModel
@{
    ViewData["Title"] = "Portale CRM - Accedi o Registrati";
    Layout = null;
}

<!DOCTYPE html>
<html lang="it" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="~/css/site.css" rel="stylesheet" />
    <style>
        #particles-js {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .auth-container {
            background-color: var(--card-bg);
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s ease;
        }

        .auth-header h2 {
            font-weight: 600;
            color: var(--primary-color);
        }

        .auth-header p {
            font-size: 0.95rem;
            color: var(--text-color);
        }

        .auth-tabs .nav-link {
            border: none;
            color: var(--text-color);
            background-color: transparent;
            transition: color 0.3s ease;
        }

            .auth-tabs .nav-link.active {
                border-bottom: 2px solid var(--primary-color);
                color: var(--primary-color);
                font-weight: 600;
            }

        .input-group {
            margin-bottom: 1rem;
            background-color: var(--input-bg);
            color: var(--text-color);
        }

        .input-group-text {
            background-color: var(--input-bg);
            color: var(--input-placeholder);
            border: 1px solid var(--input-border);
            border-right: none;
        }

        .form-control {
            background-color: var(--input-bg);
            border: 1px solid var(--input-border);
            color: var(--input-text);
        }

            .form-control:focus {
                border-color: var(--primary-color);
                box-shadow: none;
                background-color: var(--input-bg);
                color: var(--input-text);
            }

            .form-control::placeholder {
                color: var(--text-color);
            }

        ::placeholder {
            color: var(--input-placeholder);
            opacity: 1;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }

            .btn-primary:hover {
                background-color: #5a4cd2;
                border-color: #5a4cd2;
            }

        .toast {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1055;
            min-width: 250px;
        }

        #themeToggle {
            border-color: var(--primary-color);
            color: var(--primary-color);
            background-color: transparent;
        }

            #themeToggle:hover {
                background-color: var(--primary-color);
                color: #fff;
            }
    </style>
</head>

<body>
    <div class="particles" id="particles-js"></div>

    <div id="authToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">Notifica</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage"></div>
    </div>

    <div class="position-absolute top-0 end-0 m-3">
        <button id="themeToggle" class="btn btn-sm btn-outline-light" title="Cambia tema">
            <i class="fas fa-moon"></i>
        </button>
    </div>

    <div class="container d-flex align-items-center justify-content-center" style="height: 100vh;">
        <div class="auth-container col-md-8 col-lg-6">
            <div class="auth-header">
                <h2><i class="fas fa-user-shield me-2"></i> Portale CRM</h2>
            </div>

            <ul class="nav nav-tabs auth-tabs" id="authTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" role="tab">Accedi</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="register-tab" data-bs-toggle="tab" data-bs-target="#register" type="button" role="tab">Registro</button>
                </li>
            </ul>

            <div class="tab-content p-4" id="authTabContent">
                <div class="tab-pane fade show active" id="login" role="tabpanel">
                    <form id="loginForm" novalidate>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                            <input type="email" class="form-control" id="loginEmail" placeholder="Email" required>
                            <div class="invalid-feedback">Inserisci un indirizzo email valido.</div>
                        </div>

                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                            <input type="password" class="form-control" id="loginPassword" placeholder="Password" required>
                            <div class="invalid-feedback">Si prega di fornire una password.</div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="remember-me">
                                <input type="checkbox" id="rememberMe">
                                <label for="rememberMe">Ricordami</label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary w-100 mb-3">Accedi</button>
                    </form>
                </div>

                <div class="tab-pane fade" id="register" role="tabpanel">
                    <form id="registerForm" novalidate>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    <input type="text" class="form-control" id="registerNome" placeholder="Nome" required>
                                    <div class="invalid-feedback">Inserisci il tuo nome.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    <input type="text" class="form-control" id="registerCognome" placeholder="Cognome" required>
                                    <div class="invalid-feedback">Inserisci il tuo cognome.</div>
                                </div>
                            </div>
                        </div>

                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                            <input type="email" class="form-control" id="registerEmail" placeholder="Email" required>
                            <div class="invalid-feedback">Inserisci un indirizzo email valido.</div>
                        </div>

                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                            <input type="password" class="form-control" id="registerPassword" placeholder="Password" required minlength="6">
                            <div class="invalid-feedback">La password deve contenere almeno 6 caratteri.</div>
                        </div>

                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                            <input type="password" class="form-control" id="confirmPassword" placeholder="Conferma Password" required>
                            <div class="invalid-feedback">Le password devono essere identiche.</div>
                        </div>

                        <div class="form-check mb-4">
                            <input class="form-check-input" type="checkbox" id="terms" required>
                            <label class="form-check-label" for="terms">
                                Sono d'accordo con Termini e Condizioni
                            </label>
                            <div class="invalid-feedback">Devi accettare i termini.</div>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Creare Account</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
    <script>
        // Initialize toast notification system
        const authToast = new bootstrap.Toast(document.getElementById('authToast'));

        function showToast(title, message, isError = false) {
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');

            toastTitle.textContent = title;
            toastMessage.textContent = message;

            const toastElement = document.getElementById('authToast');
            toastElement.classList.remove('bg-success', 'bg-danger');
            toastElement.classList.add(isError ? 'bg-danger' : 'bg-success');

            authToast.show();
        }

        // Ensure the admin account always exists
        function ensureAdminExists() {
            let users = JSON.parse(localStorage.getItem('users')) || [];
            const adminEmail = "admin@crm.com";

            // Check if admin exists
            const adminExists = users.some(user => user.email === adminEmail && user.Ruolo === "admin");

            if (!adminExists) {
                const defaultAdmin = {
                    id: 1,
                    Nome: "Admin",
                    Cognome: "System",
                    email: adminEmail,
                    password: "admin123",
                    Ruolo: "admin",
                    creatoA: new Date().toISOString().split('T')[0],
                    photo: "/css/image/pfp.jpg",
                    isProtected: true
                };

                users.unshift(defaultAdmin);
                localStorage.setItem('users', JSON.stringify(users));
            }

            return users;
        }

        function validatePassword(password, confirmPassword) {
            if (password !== confirmPassword) {
                confirmPassword.setCustomValidity("Le password devono essere identiche.");
                return false;
            }
            confirmPassword.setCustomValidity("");
            return true;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize particles.js background
            particlesJS('particles-js', {
                particles: {
                    number: { value: 80, density: { enable: true, value_area: 800 } },
                    color: { value: "#6c5ce7" },
                    shape: { type: "circle" },
                    opacity: { value: 0.5 },
                    size: { value: 3, random: true },
                    line_linked: { enable: true, distance: 150, color: "#6c5ce7", opacity: 0.4, width: 1 },
                    move: { enable: true, speed: 2, direction: "none" }
                },
                interactivity: {
                    detect_on: "canvas",
                    events: {
                        onhover: { enable: true, mode: "grab" },
                        onclick: { enable: true, mode: "push" },
                        resize: true
                    }
                }
            });

            // Ensure admin exists on page load
            ensureAdminExists();

            if (window.location.hash === '#register') {
                const registerTab = new bootstrap.Tab(document.getElementById('register-tab'));
                registerTab.show();
            }

            // Login form submission handler
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                e.stopPropagation();

                if (this.checkValidity()) {
                    const email = document.getElementById('loginEmail').value;
                    const password = document.getElementById('loginPassword').value;
                    const rememberMe = document.getElementById('rememberMe').checked;

                    const users = JSON.parse(localStorage.getItem('users')) || [];
                    const user = users.find(u => u.email === email && u.password === password);

                    if (user) {
                        const userSession = {
                            id: user.id,
                            name: `${user.Nome} ${user.Cognome}`,
                            email: user.email,
                            role: user.Ruolo, // Using 'Ruolo' from user object
                            photo: user.photo
                        };

                        if (rememberMe) {
                            localStorage.setItem('currentUser', JSON.stringify(userSession));
                        } else {
                            sessionStorage.setItem('currentUser', JSON.stringify(userSession));
                        }

                        showToast('Accesso riuscito', `Bentornato, ${user.Nome}!`);

                        setTimeout(() => {
                            switch(user.Ruolo) {
                                case 'admin':
                                    window.location.href = '/CRM/dashboard';
                                    break;
                                case 'worker':
                                    window.location.href = '/CRM/dashboard';
                                    break;
                                case 'client':
                                    window.location.href = '/CRM/dashboard';
                                    break;
                                case 'user':
                                    window.location.href = '/CRM/dashboard';
                                    break;
                                default:
                                    window.location.href = '/CRM/dashboard';
                            }
                        }, 1500);
                    } else {
                        showToast('Accesso non riuscito', 'Email o password non valide', true);
                    }
                }

                this.classList.add('was-validated');
            });

            // Registration form submission handler

        document.getElementById('registerForm').addEventListener('submit', function(e) {
            e.preventDefault();
            e.stopPropagation();

            const password = document.getElementById('registerPassword');
            const confirmPassword = document.getElementById('confirmPassword');

            // Validate password match
            if (password.value !== confirmPassword.value) {
                confirmPassword.setCustomValidity("Le password devono essere identiche.");
                confirmPassword.reportValidity();
                return;
            } else {
                confirmPassword.setCustomValidity("");
            }

            if (this.checkValidity()) {
                const newUser = {
                    id: Date.now(),
                    Nome: document.getElementById('registerNome').value.trim(),
                    Cognome: document.getElementById('registerCognome').value.trim(),
                    email: document.getElementById('registerEmail').value.trim(),
                    password: password.value,
                    Ruolo: "user", // Default role is "user"
                    creatoA: new Date().toISOString().split('T')[0],
                    photo: "/css/image/pfp.jpg",
                    isProtected: false // Important: Mark as not protected
                };

                let users = JSON.parse(localStorage.getItem('users')) || [];
                ensureAdminExists(); // Make sure admin exists

                // Check if email already exists
                const emailExists = users.some(user =>
                    user.email.toLowerCase() === newUser.email.toLowerCase()
                );

                if (emailExists) {
                    showToast('Registrazione fallita', 'Email già in uso', true);
                    return;
                }

                // Add new user
                users.push(newUser);
                localStorage.setItem('users', JSON.stringify(users));

                showToast('Registrazione riuscita', "Account creato con successo!");

                // Switch to login tab and reset form
                const loginTab = new bootstrap.Tab(document.getElementById('login-tab'));
                loginTab.show();
                this.reset();
                this.classList.remove('was-validated');
            }

            this.classList.add('was-validated');
        });

              document.getElementById('confirmPassword').addEventListener('input', function() {
            const password = document.getElementById('registerPassword').value;
            if (password !== this.value) {
                this.setCustomValidity("Le password devono essere identiche.");
            } else {
                this.setCustomValidity("");
            }
        });

            // Theme toggle functionality
            const themeBtn = document.getElementById('themeToggle');
            function setTheme(theme) {
                document.body.classList.toggle('dark-mode', theme === 'dark');
                themeBtn.innerHTML = theme === 'dark'
                    ? '<i class="fas fa-sun"></i>'
                    : '<i class="fas fa-moon"></i>';
                localStorage.setItem('theme', theme);
            }

            const savedTheme = localStorage.getItem('theme') || 'light';
            setTheme(savedTheme);

            themeBtn.addEventListener('click', () => {
                const newTheme = document.body.classList.contains('dark-mode') ? 'light' : 'dark';
                setTheme(newTheme);
            });
        });
    </script>
</body>
</html>