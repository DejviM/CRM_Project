@page
@model CRM_Project.Pages.CRM.Admin.UserListModel
@{
    ViewData["Title"] = "Lista Clienti";
}

<style>
    html, body {
        height: 100%;
        overflow: auto;
        background-color: var(--bg-color);
        color: var(--text-color);
    }

    .card {
        background-color: var(--card-bg);
        color: var(--text-color);
        border: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .modal-content {
        background-color: var(--modal-bg);
        color: var(--modal-text-color);
        border: none;
    }

    .form-select, .form-control {
        background-color: var(--input-bg);
        color: var(--text-color);
        border: 1px solid var(--input-border);
    }

        .form-select:focus, .form-control:focus {
            box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25);
        }

    .form-control::placeholder{
        color: var(--text-color);
    }

    input,
    textarea,
    select {
        background-color: var(--input-bg);
        color: var(--input-text);
        border: 1px solid var(--input-border);
    }

        input:focus,
        textarea:focus,
        select:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25);
        }

    .table th {
        background-color: var(--table-header-bg);
        color: white;
    }

    .table td {
        background-color: var(--table-bg);
        color: var(--table-text-color);
        border-color: var(--table-border-color);
    }

    .bg-purple {
        background-color: #6c5ce7 !important;
    }

    .border-purple {
        border: 1px solid #6c5ce7 !important;
    }

    .btn-purple {
        background-color: #6c5ce7;
        color: white;
    }

        .btn-purple:hover {
            background-color: #5a4bd8;
        }

    .dashboard-header {
        background: linear-gradient(135deg, #6c5ce7, #a29bfe);
        color: white;
        padding: 25px 0;
        margin-bottom: 30px;
        box-shadow: 0 4px 20px rgba(108, 92, 231, 0.3);
    }

    .role-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .badge-admin {
        background-color: #dc3545;
    }

    .badge-worker {
        background-color: #0d6efd;
    }

    .badge-client {
        background-color: #198754;
    }

    .badge-user {
        background-color: #6c757d;
    }

    .bg-purple {
        background-color: #6c5ce7 !important;
    }
</style>

<div class="dashboard-header">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="fas fa-users-cog me-2"></i> Gestione Utenti</h1>
                <p class="mb-0">Gestisci tutti gli utenti del sistema e i loro ruoli</p>

            </div>
        </div>
    </div>
</div>

<div class="container my-4">
    <div class="row mb-3">
        <div class="col-md-4">
            <select class="form-select" id="roleFilter">
                <option value="all">Tutti i Ruoli</option>
                <option value="admin">Amministratore</option>
                <option value="worker">Lavoratore</option>
                <option value="client">Cliente</option>
                <option value="user">Utente</option>

            </select>
        </div>
        <div class="col-md-8">
            <div class="input-group">
                <span class="input-group-text bg-purple text-white"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="searchInput" placeholder="Cerca per nome o email">
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-purple text-white">
            <h5 class="mb-0">User List</h5>
        </div>
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Foto</th>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Ruolo</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody id="userTableBody"></tbody>
            </table>
        </div>
        <div class="card-footer">
            <ul class="pagination justify-content-end mb-0" id="pagination"></ul>
        </div>
    </div>
</div>

<!-- Role Change Modal -->
<div class="modal fade" id="roleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-purple text-white">
                <h5 class="modal-title">Cambia Ruolo</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Nome :</label>
                    <input type="text" class="form-control disabled" id="modalUserName" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">Ruolo Attuale:</label>
                    <input type="text" class="form-control disabled" id="modalCurrentRole" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">Nuovo Ruolo:</label>
                    <select class="form-select" id="modalNewRole">
                        <option value="admin">Admin</option>
                        <option value="worker">Worker</option>
                        <option value="client">Client</option>
                        <option value="user">User</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-purple" id="saveRoleBtn">Salva Modifiche</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize modal only if element exists
            let roleModal = null;
            if (document.getElementById('roleModal')) {
                roleModal = new bootstrap.Modal(document.getElementById('roleModal'));
            }

            let currentEditingUserId = null;
            const pageSize = 10;
            let currentPage = 1;

            // Ensure admin exists
            function ensureAdminExists() {
                let users = JSON.parse(localStorage.getItem('users')) || [];
                const adminExists = users.some(user => user.email === "admin@crm.com" && user.Ruolo === "admin");

                if (!adminExists) {
                    const defaultAdmin = {
                        id: 1,
                        Nome: "Admin",
                        Cognome: "System",
                        email: "admin@crm.com",
                        password: "admin123",
                        Ruolo: "admin",
                        creatoA: new Date().toISOString().split('T')[0],
                        photo: "/css/image/pfp.jpg",
                        isProtected: true
                    };
                    users.unshift(defaultAdmin);
                    localStorage.setItem('users', JSON.stringify(users));
                }
                return users;
            }

            // Load and display users
            function loadUsers() {
                const users = ensureAdminExists();
                console.log("All users:", users); // Debugging

                const roleFilter = document.getElementById('roleFilter').value;
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();

                const filteredUsers = users.filter(user => {
                    if (!user) return false;

                    const matchesRole = roleFilter === 'all' ||
                                      (user.Ruolo && user.Ruolo.toLowerCase() === roleFilter);
                    const matchesSearch =
                        (user.Nome && user.Nome.toString().toLowerCase().includes(searchTerm)) ||
                        (user.Cognome && user.Cognome.toString().toLowerCase().includes(searchTerm)) ||
                        (user.email && user.email.toString().toLowerCase().includes(searchTerm));

                    return matchesRole && matchesSearch;
                });

                renderTable(filteredUsers);
                renderPagination(filteredUsers.length);
            }

            function renderTable(users) {
                const start = (currentPage - 1) * pageSize;
                const paginatedUsers = users.slice(start, start + pageSize);
                let html = '';

                if (paginatedUsers.length === 0) {
                    html = '<tr><td colspan="5" class="text-center">Nessun utente trovato</td></tr>';
                } else {
                    paginatedUsers.forEach(user => {
                        if (!user) return;

                        const fullName = `${user.Nome || ''} ${user.Cognome || ''}`.trim();
                        const email = user.email || 'No email';
                        const role = user.Ruolo || 'user';
                        const photo = user.photo || '/css/image/pfp.jpg';
                        const canEdit = !user.isProtected;

                        html += `
                        <tr>
                            <td><img src="${photo}" class="rounded-circle" width="40" height="40"></td>
                            <td>${fullName}</td>
                            <td>${email}</td>
                            <td><span class="role-badge ${getRoleClass(role)}">${getRoleName(role)}</span></td>
                            <td>
                                ${canEdit ? `
                                <button class="btn btn-sm btn-purple" onclick="openRoleModal('${user.id}')">
                                    <i class="fas fa-edit"></i> Modifica Ruolo
                                </button>
                                ` : `
                                <button class="btn btn-sm btn-secondary" disabled>
                                    <i class="fas fa-lock"></i> Protetto
                                </button>
                                `}
                            </td>
                        </tr>
                        `;
                    });
                }

                document.getElementById('userTableBody').innerHTML = html;
            }

            // Helper functions
            function getRoleClass(role) {
                const roleMap = {
                    'admin': 'badge-admin',
                    'worker': 'badge-worker',
                    'client': 'badge-client',
                    'user': 'badge-user'
                };
                return roleMap[role.toLowerCase()] || 'badge-user';
            }

               function getRoleName(role) {
        const roleMap = {
            'admin': 'Amministratore',
            'worker': 'Lavoratore',
            'client': 'Cliente',
            'user': 'Utente'
        };
        return roleMap[role.toLowerCase()] || 'Utente';
    }


            function renderPagination(totalItems) {
                const totalPages = Math.ceil(totalItems / pageSize);
                let html = '';

                for (let i = 1; i <= totalPages; i++) {
                    html += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                    `;
                }
                document.getElementById('pagination').innerHTML = html;
            }

            function changePage(page) {
                currentPage = page;
                loadUsers();
            }

            // Make openRoleModal global
            window.openRoleModal = function(userId) {
                const users = JSON.parse(localStorage.getItem('users')) || [];
                const user = users.find(u => u.id == userId);
                if (!user || !roleModal) return;

                currentEditingUserId = userId;
                document.getElementById('modalUserName').value = `${user.Nome || ''} ${user.Cognome || ''}`.trim();
                document.getElementById('modalCurrentRole').value = getRoleName(user.Ruolo || 'user');
                document.getElementById('modalNewRole').value = user.Ruolo || 'user';
                roleModal.show();
            };

            // Event listeners
            document.getElementById('roleFilter').addEventListener('change', () => {
                currentPage = 1;
                loadUsers();
            });

            document.getElementById('searchInput').addEventListener('input', () => {
                currentPage = 1;
                loadUsers();
            });

            document.getElementById('saveRoleBtn').addEventListener('click', () => {
                const newRole = document.getElementById('modalNewRole').value;
                let users = JSON.parse(localStorage.getItem('users')) || [];
                const userIndex = users.findIndex(u => u.id == currentEditingUserId);

                if (userIndex !== -1) {
                    if (users[userIndex].isProtected) {
                        alert('This is a protected account and cannot be modified.');
                        return;
                    }

                    users[userIndex].Ruolo = newRole;
                    localStorage.setItem('users', JSON.stringify(users));

                    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
                    if (currentUser && currentUser.id == currentEditingUserId && newRole !== 'admin') {
                        currentUser.role = newRole;  // Add this line
                        localStorage.removeItem('currentUser');
                        alert('You changed your own role. Please login again.');
                        window.location.href = '/CRM/Login';
                    } else {
                        loadUsers();
                        roleModal.hide();
                    }
                }
            });

            // Initial load
            loadUsers();
        });
        </script>