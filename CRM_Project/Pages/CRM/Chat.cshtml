@page
@model CRM_Project.Pages.CRM.FeedBackModel
@{
}
<style>
    html, body {
        height: 100%;
        overflow: auto;
        background-color: var(--bg-color);
        color: var(--text-color);
    }

    .chat-page {
        display: flex;
        height: 100vh;
        position: relative;
    }

    .chat-container {
        width: 70%;
        max-width: 800px;
        margin: 20px;
        padding: 20px;
        background: var(--card-bg);
        color: var(--text-color);
        border-radius: 10px;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .chat-header {
        font-size: 1.4rem;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .chat-box {
        flex: 1;
        overflow-y: auto;
        background-color: rgba(0, 0, 0, 0.05);
        padding: 15px;
        border-radius: 10px;
    }

    .message {
        margin-bottom: 10px;
        display: flex;
    }

        .message.client .bubble {
            background-color: var(--bubble-client-bg);
            color: var(--text-color);
            align-self: flex-start;
        }

        .message.agent .bubble {
            background-color: var(--bubble-agent-bg);
            color: var(--text-color);
            align-self: flex-end;
            margin-left: auto;
        }

    .bubble {
        padding: 10px 15px;
        border-radius: 15px;
        max-width: 70%;
    }

    .chat-input {
        margin-top: 15px;
        display: flex;
        gap: 10px;
    }

        .chat-input input {
            background-color: var(--input-bg);
            color: var(--input-text-color);
            flex: 1;
            border-radius: 8px;
            border: none;
            padding: 10px;
        }

        .chat-input button {
            background-color: var(--primary-color);
            color: var(--text-color);
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
        }

    .user-list {
        width: 280px;
        background-color: var(--card-bg);
        color: var(--text-color);
        padding: 20px;
        border-left: 1px solid rgba(255, 255, 255, 0.1);
        transition: transform 0.3s ease;
        z-index: 999;
    }

        .user-list h5 {
            margin-bottom: 20px;
            font-weight: 600;
        }

    .user {
        padding: 10px;
        margin-bottom: 10px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        cursor: pointer;
    }

        .user:hover,
        .user.active {
            background-color: var(--primary-color);
            color: var(--text-color);
        }

        .user small {
            color: var(--text-color);
        }

    .toggle-contacts-btn {
        display: none;
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: var(--bg-color);
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        color: var(--text-color);
        font-size: 22px;
        z-index: 1001;
        box-shadow: 0 4px 8px rgba(0,0,0,0.4);
        cursor: pointer;
    }

    @@media (max-width: 768px) {
        .user-list {
            position: fixed;
            top: 0;
            right: 0;
            height: 100%;
            background-color: var(--bg-color);
            transform: translateX(100%);
            width: 250px;
        }

            .user-list.open {
                transform: translateX(0);
            }

        .toggle-contacts-btn {
            display: block;
        }

        .chat-container {
            width: 100%;
            margin: 0;
        }
    }

    .dashboard-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 25px 0;
        margin-bottom: 30px;
        box-shadow: 0 4px 20px rgba(108, 92, 231, 0.3);
    }

    .unread-dot {
        display: inline-block;
        width: 10px;
        height: 10px;
        background-color: red;
        border-radius: 50%;
        margin-left: 5px;
    }


    .user-role-badge {
        display: inline-block;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: bold;
        text-transform: uppercase;
        margin-left: 8px;
    }

    .role-admin {
        background-color: #6c5ce7;
        color: white;
    }

    .role-worker {
        background-color: #00b894;
        color: white;
    }

    .role-client {
        background-color: #0984e3;
        color: white;
    }

    .role-user {
        background-color: #636e72;
        color: white;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }
</style>

<div class="dashboard-header">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="fas fa-comment-dots me-2"></i> Chat</h1>
            </div>
        </div>
    </div>
</div>
<div class="chat-page">
    <!-- Main Chat Section -->
    <div class="chat-container">
        <div class="chat-header" id="chatHeader">Seleziona un utente per chattare</div>
        <div class="chat-box" id="chatMessages"></div>
        <div class="chat-input">
            <input type="text" id="chatInput" placeholder="Scrivi un messaggio..." onkeypress="handleKeyPress(event)">
            <button onclick="sendMessage()">Invia</button>
        </div>
    </div>

    <!-- Contact List (Right Side) -->
    <div class="user-list" id="userList">
        <h5>Contatti</h5>
        <div id="contactsContainer">
            <!-- Contacts will be populated here -->
        </div>
    </div>

    <!-- Floating Contact Button -->
    <button class="toggle-contacts-btn" onclick="toggleContacts()">💬</button>
</div>

<script>
    // Global variables
    let currentUser = null;
    let selectedContact = null;
    let messages = [];
    let contacts = [];

    // Initialize the chat
    document.addEventListener('DOMContentLoaded', function() {
        initializeChat();
    });

    function initializeChat() {
        // Get current user from storage
        const storedUser = localStorage.getItem('currentUser') || sessionStorage.getItem('currentUser');

        if (!storedUser) {
            alert("Per favore effettua il login per accedere alla chat.");
            window.location.href = "/CRM/Login";
            return;
        }

        currentUser = JSON.parse(storedUser);
        loadContacts();
        loadMessages();
        setupEventListeners();
    }

    function loadContacts() {
        // Get all users from localStorage
        const allUsers = JSON.parse(localStorage.getItem('users')) || [];

        // Filter based on current user's role
        contacts = allUsers.filter(user => {
            if (user.id === currentUser.id) return false;

            // Admin can chat with workers and clients
            if (currentUser.role === 'admin') {
                return ['worker', 'client', 'user'].includes(user.Ruolo);
            }

            // Worker can chat with admin and clients
            if (currentUser.role === 'worker') {
                return ['admin', 'client'].includes(user.Ruolo);
            }

            // Client can chat with admin and workers
            if (currentUser.role === 'client') {
                return ['admin', 'worker'].includes(user.Ruolo);
            }

            // Regular users can only chat with admin
            if (currentUser.role === 'user') {
                return ['admin'].includes(user.Ruolo);
            }

            return false;
        });

        renderContacts();
    }

    function renderContacts() {
        const container = document.getElementById('contactsContainer');
        container.innerHTML = '';

        if (contacts.length === 0) {
            container.innerHTML = '<p>Nessun contatto disponibile</p>';
            return;
        }

        contacts.forEach(contact => {
            const contactElement = document.createElement('div');
            contactElement.className = 'user';
            contactElement.id = `contact-${contact.id}`;
            contactElement.onclick = () => selectContact(contact);

            // Determine role class
            let roleClass = '';
            switch(contact.Ruolo) {
                case 'admin': roleClass = 'role-admin'; break;
                case 'worker': roleClass = 'role-worker'; break;
                case 'client': roleClass = 'role-client'; break;
                case 'user': roleClass = 'role-user'; break;
                default: roleClass = 'role-user';
            }

            contactElement.innerHTML = `
                <div class="user-info">
                    <img src="${contact.photo || '/css/image/pfp.jpg'}" class="user-avatar" alt="${contact.Nome}">
                    <div>
                        <strong>${contact.Nome} ${contact.Cognome}</strong>
                        <span class="user-role-badge ${roleClass}">${contact.Ruolo}</span>
                    </div>
                </div>
            `;

            container.appendChild(contactElement);
        });
    }

    function selectContact(contact) {
        selectedContact = contact;
        document.getElementById('chatHeader').textContent = `Chat con ${contact.Nome} ${contact.Cognome}`;

        // Highlight selected contact
        document.querySelectorAll('.user').forEach(el => el.classList.remove('active'));
        document.getElementById(`contact-${contact.id}`).classList.add('active');

        renderMessages();
    }

    function loadMessages() {
        // Load messages from localStorage
        const storedMessages = localStorage.getItem('chatMessages');
        messages = storedMessages ? JSON.parse(storedMessages) : [];
    }

    function saveMessages() {
        localStorage.setItem('chatMessages', JSON.stringify(messages));
    }

    function renderMessages() {
        if (!selectedContact) return;

        const chatBox = document.getElementById('chatMessages');
        chatBox.innerHTML = '';

        // Filter messages for this conversation
        const conversationMessages = messages.filter(msg =>
            (msg.senderId === currentUser.id && msg.receiverId === selectedContact.id) ||
            (msg.receiverId === currentUser.id && msg.senderId === selectedContact.id)
        );

        if (conversationMessages.length === 0) {
            chatBox.innerHTML = '<p>Nessun messaggio ancora. Inizia la conversazione!</p>';
            return;
        }

        conversationMessages.forEach(msg => {
            const isCurrentUser = msg.senderId === currentUser.id;
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isCurrentUser ? 'agent' : 'client'}`;

            const bubble = document.createElement('div');
            bubble.className = 'bubble';
            bubble.textContent = msg.content;

            messageDiv.appendChild(bubble);
            chatBox.appendChild(messageDiv);
        });

        // Scroll to bottom
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function sendMessage() {
        if (!selectedContact) {
            alert('Seleziona un contatto prima di inviare un messaggio');
            return;
        }

        const input = document.getElementById('chatInput');
        const content = input.value.trim();

        if (!content) return;

        // Create new message
        const newMessage = {
            senderId: currentUser.id,
            senderName: `${currentUser.name}`,
            receiverId: selectedContact.id,
            receiverName: `${selectedContact.Nome} ${selectedContact.Cognome}`,
            content: content,
            timestamp: new Date().toISOString(),
            read: false
        };

        // Add to messages and save
        messages.push(newMessage);
        saveMessages();

        // Clear input and render
        input.value = '';
        renderMessages();
    }

    function handleKeyPress(event) {
        if (event.key === 'Enter') {
            sendMessage();
        }
    }

    function setupEventListeners() {
        // Handle window resize for mobile view
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                document.getElementById('userList').classList.remove('open');
            }
        });
    }

    function toggleContacts() {
        document.getElementById('userList').classList.toggle('open');
    }

    // Make functions available globally
    window.sendMessage = sendMessage;
    window.handleKeyPress = handleKeyPress;
    window.toggleContacts = toggleContacts;
</script>
